#!/sbin/busybox sh
#
# CyanogenMod-FilesystemConverter for Samsung Galaxy S
# backup a partition, format, and restore
# by codeworkx, coolya, finghin (c) 2010, GPLv2
# based on z4mod by Elia Yehuda
#
version=1.0.0

# we make sure we have /sdcard mounted
sdcardmounted=`busybox grep sdcard /proc/mounts`
if [ "$sdcardmounted" == "" ]; then
# mount sdcard according to device node from fota.rc
sdcarddev=`busybox grep "mount vfat .* /sdcard" /fota.rc | busybox awk '{print $3}'`
mkdir /sdcard
busybox mount $sdcarddev /sdcard
fi

# everything is logged into /sdcard/cyanogenmod.log
exec >> /sdcard/cyanogenmod.log 2>&1

set -x
export PATH=/:/sbin:/system/xbin:/system/bin:$PATH

halt()
{
umount /${partition}
[ "$sdcardmounted" == "" ] && busybox umount /sdcard
exit 1
}

busybox cat <<EOF
########################################################################################
#
# Starting CyanogenMod-FilesystemConverter-$version '$3' convert on /$1 (/dev/block/$2)
# `busybox date`
#
########################################################################################
EOF

partition="$1"
devblock=/dev/block/"$2"
filesystem="$3"

if [ "${filesystem:0:3}" == "ext" ]; then
[ `busybox grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
elif [ "$filesystem" == "rfs" ]; then
format_cmd=fat.format
else
# defaulting to 'auto' - check which filesystem are supported
[ `busybox grep ext4 /proc/filesystems` ] && filesystem=ext4
format_cmd=mkfs.${filesystem}
fi

# check we have all the tools needed
[ "${format_cmd}" == "" ] && halt
[ `busybox which /system/xbin/${format_cmd}` ] || halt

# fix mtab errors
busybox ln -s /proc/mounts /etc/mtab

# /system takes special handling before we can unmount it
if [ "${partition}" == "system" ]; then
# if we want to umount it, we better have it in /sbin...
busybox cp `busybox which /system/xbin/${format_cmd}` /sbin/
# kill all processes using /system
busybox fuser -mk /system
fi

#
# Make sure target partition is mounted
#
    # first, unmount to be sure
    busybox umount /${partition}

    # try to mount data as rfs
    busybox mount -t rfs ${devblock} /${partition}

    # otherwise mount data as ext4
    if busybox [ -z "`busybox mount | busybox grep ${devblock} | busybox grep rfs`" ]; then
        /sbin/fsck.ext4 -p ${devblock}
        /sbin/busybox mount -t ext4 ${devblock} /${partition}
    fi


# get current filesystem
currentfs=`busybox grep "/${partition}" /proc/mounts | busybox awk '{print $3}'`
[ "${currentfs}" == "${filesystem}" ] && halt
# defaulting to rfs
[ "${currentfs}" == "" ] && currentfs="rfs"

# we unmount just to make sure target is not mounted already
busybox umount /${partition}

# we must mount target with propriate mount parameters
if [ "${currentfs}" == "rfs" ]; then
# mount using RFS mount parameters - otherwise it will be mounted as FAT, which is bad.
busybox mount -t $currentfs ${devblock} /${partition} -o nosuid,nodev,check=no || halt
#mount -o nosuid,nodev,check=no -t rfs ${devblock} /${partition}
else
# mount target as ext2/3/4
busybox mount -t $currentfs ${devblock} /${partition} -o nosuid,nodev,noatime,nodiratime,errors=continue || halt
fi

# remove old backup if any
busybox rm -f /sdcard/${partition}.cyanogenmod.tar

# check for free space (using such a complicated command to overcome a 'df' bug with long lines)
# get free space on /sdcard
free_space=`busybox df /dev/block/mmcblk0p1 | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $3}'`
# get used space on target
backup_size=`busybox df ${devblock} | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $2}'`
[ $backup_size -ge $free_space ] && halt

# backup target - exit on failure
busybox tar cf /sdcard/${partition}.cyanogenmod.tar /${partition}
# for debug:
busybox echo $?

# umount - exit on failure, no harm is done
busybox umount /${partition} || halt

# for 'data' partition we make sure the filesystem type is flagged in the partition table
if [ "${partition}" == "data" ]; then
# we change fs-type manually in the partition table
if [ "${filesystem}" == "rfs" ]; then
# flag partition as fat32 for rfs
echo -en "\x0C" | busybox dd of=/dev/block/mmcblk0 seek=$((0x1d2))
else
# flag partition as linux filesystem
echo -en "\x83" | busybox dd of=/dev/block/mmcblk0 seek=$((0x1d2))
fi
fi

# Format partition with optimized settings (TODO: restore on error)
if [ "${filesystem}" == "rfs" ]; then
mountopt="llw,check=no,nosuid,nodev"
${format_cmd} -F 32 -S 4096 -s 4 ${devblock}
elif [ "${filesystem}" == "jfs" ]; then
mountopt="nosuid,nodev,noatime,nodiratime,errors=continue"
${format_cmd} -L ${partition} -q ${devblock}
else
if [ "${filesystem}" == "ext2" ]; then
mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh"
elif [ "${filesystem}" == "ext3" ]; then
mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0"
else
mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0,noauto_da_alloc"
fi
# TODO: "-E lazy_itable_init=1 -O sparse_super,uninit_bg" doesnt work on ext2. maybe busybox mount issue?
${format_cmd} -q -L ${partition} -b 4096 -m 0 -F ${devblock}
# tune the filesystem - check every 100 mounts or 30 days
tune2fs -c 100 -i 30d -m 0 ${devblock}
fi
# mount the new filesystem - exit on failure (TODO: restore on error)
busybox mount -t ${filesystem} ${devblock} /${partition} -o $mountopt || halt

# this is for the logging...
busybox mount | busybox grep ${devblock}

# extract our data back to the new filesystem
busybox tar xf /sdcard/${partition}.cyanogenmod.tar -C /
ret=$?
[ $ret == 0 ] && busybox rm /sdcard/${partition}.cyanogenmod.tar

busybox mount -o remount,rw /system
busybox touch /system/etc/fstab
# remove entry if exists already
busybox sed '\,'$devblock',d' /system/etc/fstab
# add /system/etc/fstab proper info
echo "$devblock $filesystem $mountopt" >> /system/etc/fstab
busybox mount -o remount,ro /system

# umount
busybox umount ${devblock}
[ "$sdcardmounted" == "" ] && busybox umount /sdcard

exit $ret
